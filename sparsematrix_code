class SparseMatrixElement:
    def _init_(self, row, col, value):
        self.row = row
        self.col = col
        self.value = value

class SparseMatrix:
    def _init_(self, matrixFilePath=None, numRows=None, numCols=None):
        self.numRows = numRows
        self.numCols = numCols
        self.elements = []

        if matrixFilePath:
            self.readFromFile(matrixFilePath)

    def readFromFile(self, matrixFilePath):
        with open(matrixFilePath, 'r') as file:
            lineNumber = 0
            for line in file:
                lineNumber += 1
                if lineNumber == 1:
                    self.parseMatrixSize(line)
                elif lineNumber > 2:
                    self.parseMatrixElement(line)

    def parseMatrixSize(self, line):
        parts = line.split('=')
        self.numRows = int(parts[1].strip().split(',')[0])
        self.numCols = int(parts[2].strip())

    def parseMatrixElement(self, line):
        parts = line.strip()[1:-1].split(',')
        row = int(parts[0].strip())
        col = int(parts[1].strip())
        value = int(parts[2].strip())
        self.elements.append(SparseMatrixElement(row, col, value))

    def getElement(self, currRow, currCol):
        for elem in self.elements:
            if elem.row == currRow and elem.col == currCol:
                return elem.value
        return 0

    def setElement(self, currRow, currCol, value):
        for elem in self.elements:
            if elem.row == currRow and elem.col == currCol:
                elem.value = value
                return
        self.elements.append(SparseMatrixElement(currRow, currCol, value))

# Example usage:
matrix = SparseMatrix(matrixFilePath="matrix.txt")
print("Element at (0, 128):", matrix.getElement(0, 128))
matrix.setElement(0, 128, -500)
print("Updated element at (0, 128):", matrix.getElement(0, 128)
